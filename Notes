
								Enterprise JavaBeans (EJB)
Has the business logic of the model.
EJB systems are written in Java, they are platform independent. Being object oriented(POJO), they can implement into existed systems probably with recompiling and configuration.
An EJB server provides functions like threading, concurrency, security and memory management. 

A transaction can be managed by either the container(default) or the bean.
In Container-managed transactions (CMT), "EJB" takes care of starting and commiting the transactions whenever needed. All session and message-driven beans may use CMT.

In Bean-managed transactions (BMT), the "bean-provider" take care of the transactions(start and commit). Session and message-driven beans may use BMT.

-------------------------------------------------------------------------------------------------------------------------
									Spring Bean Scope

The core of spring framework is it’s bean factory and mechanism to create and manage beans inside the Spring container.

@Bean
configuring type of bean->
@Scope(value="singleton/ prototype/ session etc") 
XML file <bean id="demoBean" class="com.howtodoinjava.application.web.DemoBean" scope="session" />

The beans in spring container can be created in five scopes i.e. 

1.SINGLETON (default) – Creates only one bean instance for the spring container. While using we have to check for shared instances to avoid data inconsistency issues. 

2.PROTOTYPE –  Created by request from spring container.

3.REQUEST(web applications) – Similar to prototype it's created by HTTP request.

4.SESSION – A new bean will be created for each HTTP session by the container.

5.GLOBAL SESSION SCOPE– Creates global session beans for Portlet applications.
======================================================================================================================
Spring Initializr - We can create a shell project with required dependencies from our choice of selecting Maven, gradle, jars etc 

Mave VS Gradle vs ANT
ANT is old, flexible, updated to ANTIVY
Maven is simple, XML(pom), slower, need to compile, not customizable, Web apps only, project structure 
Gradle is Complex queries, DSL(domain-specific-lang), faster(track only current task), no compile, best for android also developing web apps, No structure

------------------------------------------------------------------------------------------------------------------------
 						Spring(core, Spring MVC, persistence, Spring Security)
It configures different modules like
Spring JDBC    
Spring MVC   
Spring AOP    
Spring ORM 
Spring Test         

 it provides support to various frameworks such as Struts, Hibernate, EJB, etc
 basic dependencies to start spring is "springweb" and "springwebmvc". All other dependencies are added automatically during build time.
-------------------------------------------------------------------------------------------------------------------------
								Springboot:

extension of the Spring framework which removes the boilerplate configurations to set up Spring application.

starter dependencies
default server
Automatic config whenever needed(by looking at the dependencies, properties, and beans). 

basic dependencies to start spring is "springbootstarterweb"
All other dependencies are added automatically during build time

Spring Boot web starters use Tomcat as the default embedded servlet container.
Spring Boot uses Hibernate as the default JPA implementation.
spring.jpa.hibernate.ddl-auto is used for database initialization.

@SpringBootApplication == @ComponentScan + @Configuration + @EnableAutoConfiguration//entry point

				                        Dependency injection(DI)
Dependency Injection is the process where Spring framework search for the beans and identifies the dependencies, and creates bean instances by autowiring. 
Java based annotation, XML based annotation, annotation based 
It helps in removing hardcode by flexibility of changing the code at compiling or run-time.
n OOP, object reference plays a key role. DI provides it and we don't even need not to manage at application level. 
Spring and Google Guice are best examples for dependency Injection.
uses setter inj or field injection

									Inversion of Control (IOC). 
									
The control of creating a bean is taken from user and hand over to spring/container which is new obj creating. DI due to IOC  
In Spring(Loose Coupling) , we use @Autowired annotation over the dependency class then Spring takes the control of creating the instance and injecting the dependencies.
-> Find Beans  -> Identify their dependencies and wire the dependencies  -> Manage Lifecycle of the Bean (create,process, destruction)

										Application Context
Is an advanced version of IOC Container provides all the functionalities of Bean Factory like AOP, Internationalization capabilities, web application context 
(request, session, etc).
Created by using -> ClassPathXmlApplicationContext(XML Files) -> @Configuration

The Spring documentation recommends using constructor-based injection for mandatory dependencies, and setter-based injection for optional ones.


Starters - in pom.xml dependencies
predefined Endpoints - logs, env, disk space, health, et cetera
custom configurations - on bean, on class, on properties
Spring Actuators - custom endpoints to get staus of app


							WORKING

https://www.tutorialspoint.com/spring_boot/spring_boot_building_restful_web_services.html

from the run method, the main application context started
searches for the classes annotated with @Configuration
stores those beans in JVM- IOC container
automatically configures the dispatcher servlet (for spring, autoconfig in spring boot by spring-boot-starter)
registers the default handler mappings, messageConverts, and all other basic things.


			POI        for excel
spring-boot-maven      -plugin, to package a web application as an executable JAR
spring-boot-starter: core starter, including auto-configuration support, logging, and YAML
spring-boot-starter-web: starter for building web, including RESTful, applications using Spring MVC

spring-boot-starter-aop: starter for aspect-oriented programming with Spring AOP and AspectJ
spring-boot-starter-data-jpa: starter for using Spring Data JPA with Hibernate
spring-boot-starter-security: starter for using Spring Security
spring-boot-starter-test: starter for testing Spring Boot applications
======================================================================================================================
										    @nnotations
https://springframework.guru/spring-framework-annotations/

@SpringBootApplication == @ComponentScan + @Configuration + @EnableAutoConfiguration//entry point
@ComponentScan(used with configuration) to scan your components added in your project, also used to specify base packages using basePackageClasses 
@Configuration has methods to instantiate and configure dependencies.
@EnableAutoConfiguration is used for auto-configuring beans present in the classpath

@RestController is a convenience annotation that combines @Controller(every method returns a object instead of a view) and @ResponseBody(sends HTML as response) 
@Controller to indicate the class is a Spring controller

@Autowiring(DI injection) injects the object dependency implicitly by uses setter inj, constructor i or field injection.
@Entity is used to mark the class as a persistent Java class in DB
@RequestMapping - it routes the path
@Value to inject values from a property file into a bean’s attribute
@Component indicate a Spring component to component-scan add into the application context- specified beans creation

@Qualifier more control of the dependency injection the specific service 
@Column annotation is used to define the properties of the column that will be mapped to the annotated field
@Requiered On bean setter method to populated at configuration time without BeanInitializer exception.
@Lazy bean will be created and initialized only when it is first requested

@Repository tells Spring to bootstrap about repository during component scan.
@Bean works with @Configuration to create Spring beans.

@Get,Put, Post, Delete Mapping annotations are for mapping HTTP CRUD Operations.

@MappedSuperclass in hibernate supports entities to keep basic properties in a super class. The super class annotated by @MappedSuperclass will not behave as independent entity. It will not be associated with any database table. If we want to change the column name different from super class, we need to use @AttributeOverride.
@GetMapping("/notes") annotation is a short form of @RequestMapping(value="/notes", method=RequestMethod.GET)

@ConditionalOnMissingBean 

--------------------------------------------------------------------------------------------------------------------------
						 convert JSON to XML or XML to JSON?
first convert from json,xml -> string, 
convert line break -> create object-> convert into xml, json 
Using the JsonConvert class
// XmlDocument doc = JsonConvert.DeserializeXmlNode(json);

--------------------------------------------------------------------------------------------------------------------------
								Jackson API
Jackson is a very popular and efficient java based library "to serialize or map java objects to JSON and vice versa".
achived in 3 ways-
-> Data Binding* (using annotations) [object - LinkedHashMap<String,Object> , array - ArrayList<Object> ,string - String]
-> Tree Model (tree representation of JSON using objectmapper)
-> Streaming API(JsonParser reads the data and JsonGenerator writes the data)	

Java API for RESTful Web Services (JAX-RS) is the Java API for creating REST web services. 
JAX-RS uses annotations to simplify the development and deployment of web services.	

									   ObjectMapper
ObjectMapper is the main class of Jackson library. It provides functionality for reading and writing JSON from POJOs or JSON Tree Model (JsonNode). 
It supports polymorphism and Object identity. It act as a factory for more advanced ObjectReader and ObjectWriter classes.
--------------------------------------------------------------------------------------------------------------------------
										JSON
JSON (JavaScript Object Notation) is a text-based format shows structured data based on JavaScript object. 
It's used for transmitting data in web applications ie., between a server and web application.

To convert a Java object into JSON, the we use: -> GSON & JACKSON API
1. Add jar files of Jackson
2. Create a POJO(which convert into JSON)
3. Create a Java class (Convert the object into JSON using ObjectMapper class of JacksonAPI)
4. Execute. 
performing operations.
-------------------------------------------------------------------------------------------------------------------
 								API

API is known as the Application Programming Interface and is offered by both the client and the server. In the client world, this is offered by the browser whereas in the server world it’s what is provided by the web service which can either be SOAP or REST.
-------------------------------------------------------------------------------------------------------------------------
								Blocking IO
Input/output (IO) refers to interaction with devices such as a hard drive, network or database. Generally anything that is not happening in the CPU is called IO. When you call an API that requests data from IO, you will not get a response instantly, but with some delay. This delay can be very small for requesting a file on a hard drive, and much longer when requesting data from a network. This is because the data you request from IO devices has to travel longer to the caller. 
For instance:
A file stored on a hard drive must be transferred through SATA cables and main board buses to the CPU. The data from a network resource located on a server far away must travel through network cables, routers and eventually the network interface card (NIC) in your computer to the CPU

									Context switching 
Process of taking threads on and off the CPU. Calling an API that requests data from IO will cause the running thread to “block”, i.e. it is waiting until the requested data has returned to the caller. When a thread is blocked in Linux, it will be put in a Sleep state by the kernel until data has returned to the caller. Threads in sleep state immediately give up its access to the CPU, so to not waste CPU time. After IO is ready, the thread is taken out of the Sleep state and put in Runnable state. Threads in this state are eligible to be executed on the CPU again. The thread scheduler will put the thread on a CPU when one is available
-------------------------------------------------------------------------------------------------------------------------
 									Webservice
 application to application communication(request, response)
 platform independent
 communication over the network

Add these concepts in the RESUME
                                            	 REST API

communication between client and server. Services are using URI (Unified Resource Identifier) using HTTP protocol.
URI is similar to URL of a webpage, if you want to call a webservice, you can use a URI and call the service using HTTP request.
No complex envelopes and protocols(unlike in soap), services work with Resources instead of operations.
REST has an architectural style which makes it processing free and flexible.
REST is faster compared to SOAP.
XML, JSON, HTML

HTTP METHODS - GET PUT POST DELETE TRACE OPTIONS(returns info about API (methods/content type), HEAD (return info about resource (version/length/type)
Idempotent(same results) are PUT GET DELETE HEAD
Java strictfp keyword ensures that you will get the same result on every platform if you perform operations

												SOAP
SOAP is an older web server technology with a complex definition for the messages that are sent back and forth. SOAP allows only XML data format. These messages are so called "Envelopes"(head, body) with additional information.
identify the Service and the Operations like GetCustomer, SaveCustomer(), UpdateCustomer()
because the operations are named by the developers. So anyone can name the operations differently. Because of this, the consumer / client needs to know the service contract completely if they need to work with that service. Also, they need to know which operation is doing what kind of activity.

Path Variable (identifying resource) and Query Parameter(filtering items)

http://www.google.com/hi/there?qs1=you&qs2=tube

query params
{
  qs1: 'you',
  qs2: 'tube'
}

req params
{
  param1: 'there'
}

SOAP stands for Simple Object Access Protocol whereas REST stands for Representational State Transfer.
SOAP is a protocol whereas REST is an architectural pattern.
SOAP uses service interfaces to expose its functionality to client applications while REST uses Uniform Service locators to access to the components on the hardware device.
SOAP needs more bandwidth for its usage whereas REST doesn’t need much bandwidth.
Comparing SOAP vs REST API, SOAP only works with XML formats whereas REST work with plain text, XML, HTML and JSON.
SOAP cannot make use of REST whereas REST can make use of SOAP.

--------------------------------------------------------------------------------------------------------------------------
			JWT (JSON web token)
1.API authorizing
2.data transfer[having all the details]

api's are secured with oauth2.0
access token and refresh token(response)
jwt.io
gmail oauth flow with java

https://anil-pace.medium.com/json-web-tokens-vs-oauth-2-0-85dd0b32057d

							OAUTH
												
Access granting protocol. Data access without sharing username and passwords for every application.
Federated Authentication(App 2 App)
Delegated Authentication(App 2 other app's selected access)

									Spring security   
authentication, authorization Java apps
--------------------------------------------------------------------------------------------------------------------------
								what is restless and resfull services?

Restless is basically any service that doesn’t follow the REST protocol
The main difference ins basically that REST is meant to be used with the HTTP protocols and thus basically uses web servers for the server side. Other services can use HTTP but can also use other transport layers instead. (SOAP can use SMTP, for example, which is an email protocol!)

										Java Message Service
JMS stands for Java Message Service. JMS is a standard that defines how you can access enterprise messaging systems from Java programs. 
JMS implemented by messaging service providers like IBM MQ(message queueing) to allow JMS client applications to access the provider’s messaging service
MQ is communication b/n service request and response

==========================================================================================================================
								JPA(Java Persistance API)

JPA, makes life easy for interaction with database instances. 
It is a collection of classes and methods used to store data in database.
It creates a mapping file(ORM.xml) between object models (Java program) and relational models (database program).
It stores business entities(POJO) as entities and manage the entities with relationships(1-1, 1-many, Many-1).
JPA INTERFACES -> Entity, EntityManaager, EntityManagerFactory, Persistance, Query

(Eager fetch)Fetching the whole record using Primary Key
(lazy fetch)fetches the record for the first time and stores it in cache memory for furthur use. 
Performance wise, lazy fetch is preferable.
-------------------------------------------------------------------------------------------------------------------------
						SWAGGER

documenting of endpoints- all possibilities
Conusumer will have all the information needed
springfox
=======================================================================================================================
										
Monolithic VS SOA VS MicroService

										Microservices

Microservices can adapt easily to other frameworks or technologies.
Failure of a single process does not affect the entire system.
Provides support to big enterprises as well as small teams.
Can be deployed independently and in relatively less time.

Disadvantage is DEVOPS - everything is individual

Note: App dynamics is tool provided on service instance and monitors how many end points are hit per sec.
How many transactions per sec. If transactions are going beyond certain threshold value we are going to advice go for another node.

