-------------------------------------------------------------------------------------------------------------------------
								Persistant Class

Java classes whose objects or instances are stored in database tables are called persistent classes in Hibernate. 
Hibernate works best if these classes follow Plain Old Java Object (POJO) programming model.

The concept of Hibernate is to take the values from Java class attributes and persist them into a database table. A mapping document helps Hibernate in determining how to pull the values from the classes and map them with table and associated fields.
All Java classes that will be persisted need a default constructor.

All classes should contain an ID in order to allow easy identification of your objects within Hibernate and the database. This property maps to the primary key column of a database table.

All attributes that will be persisted should be declared private and have getXXX and setXXX methods defined in the JavaBean style.

A central feature of Hibernate, proxies, depends upon the persistent class being either non-final, or the implementation of an interface that declares all public methods.

All classes that do not extend or implement some specialized classes and interfaces required by the EJB framework.

The POJO name is used to emphasize that a given object is an ordinary Java Object, not a special object, and in particular not an Enterprise JavaBean.
--------------------------------------------------------------------------------------------------------------------------
										Hibernate

https://www.codejava.net/frameworks/hibernate/hibernate-query-language-hql-example

Spring Boot uses Hibernate(artist) as the default JPA(art) implementation.
spring.jpa.hibernate.ddl-auto is used for database initialization.
If you change the name or type of a field, or add another field to the model, then all these changes will be reflected in the mapped table as well.
---------------------------------------------------------------------------------------------------------------

Please explain the difference between an inner join and an outer join?
		Inner Join returns common in two tables(X intersection Y).
		
Outer Join has -> left outer join, right outer join and full outer join.  
		   Left Outer Join gives rows in A and common rows in B 
		   Right Outer Join gives rows in B and common rows in A
		   Full outer Join returns all rows in A and B (A union B).
--------------------------------------------------------------------------------------------------------------------------
Caching (caffeine/ redis)

Server cache
DB Cache
Browser Cache


lazy Loading(check cahce, if not present write into cache and return from datasource)
Read through(if data not in cahce, save into cahce from datasource and then return from Cache)
Write through (Write everything into cache and then save into db)
Write behind()
--------------------------------------------------------------------------------------------------------------------------
												
DB link - > https://bytescout.com/blog/20-important-sql-queries.html#4

								ODBC(open db connection)

With ODBC, we can "access data from any application, regardless of any DBMS" by inserting a middle layer "DATABASE DRIVER" between an application and the DBMS. 
DATABASE DRIVER translate the application's data queries into commands that DBMS understands.The application must be capable of issuing ODBC commands and the DBMS must be capable of responding to them.

--------------------------------------------------------------------------------------------------------------------------
											JDBC(Java Database Connectivity)

JDBC "allows Java programs to interact with any SQL based database" and execute SQL statements. It has a single database application that run on different platforms which interacts with different DBMSs.
JDBC is similar to ODBC, but is designed specifically for Java programs, whereas ODBC is language-independent.
					
					difference between SQL (such as SQL Server) and NoSQL (such as Mongo DB)?
	
MySQL(RDBMS) database can replicate across multiple nodes. We use MySQL for multiple row transactions and applications which run on legacy systems
MongoDB(distributed) is a good choice for databases having no specific schema definitions or if it keeps changing like mobile apps & real-time analytics.
The main difference is the way of storing the data(table-based VS key-value pair, document or graph).
We can scale in load on single server(MySQL) on other hand we can add servers(NoSQL).
--------------------------------------------------------------------------------------------------------------------------
								One to many relation
Book table (pk_book_id, title, ISBN) is associated with Author (pk_author_id, author_name, phone_no, fk_book_id). 
One book can have many authors. This relationship can be implemented by using (PK_Author_Id as Primary Key) and (Fk_Author_Id as Foreign Key).
--------------------------------------------------------------------------------------------------------------------------
													Save vs Persist
save() generates a new identifier and INSERT record into database while saveOrUpdate can either INSERT or UPDATE based upon existence of record.
persist returns void.
Save returns Serializable object.  

										Stored Procedures
Store and call later

Delimiter// - say stmnt end
CREATE PROCEDURE pet()
BEGIN
		logic(commands)
END //
Delimiter;

SET @variable = 2013;   // set value
SELECT @variable := "avinash"; //return value(:= means assigning)
PRIMARY KEY
AUTO_INCRMENT
==========================================================================================================================
												JPA(Java Persistance API)

JPA, makes life easy for interaction with database instances. 
It is a collection of classes and methods used to store data in database.
It creates a mapping file(ORM.xml) between object models (Java program) and relational models (database program).
It stores business entities(POJO) as entities and manage the entities with relationships(1-1, 1-many, Many-1).
JPA INTERFACES -> Entity, EntityManaager, EntityManagerFactory, Persistance, Query

(Eager fetch)Fetching the whole record using Primary Key
(lazy fetch)fetches the record for the first time and stores it in cache memory for furthur use. 
Performance wise, lazy fetch is preferable.
-------------------------------------------------------------------------------------------------------------------------
													
